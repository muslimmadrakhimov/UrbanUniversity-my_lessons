#  Цель: Применить очереди в работе с потоками, используя класс Queue.
#  Задача "Потоки гостей в кафе":


import threading  # Модуль для работы с потоками
import time  # Модуль для работы с временем (используем для имитации задержек)
import random  # Модуль для работы с генерацией случайных чисел (используем для случайных задержек)
from queue import Queue  # Модуль для работы с очередью


# Класс Table (Стол)
class Table:
    """
    Класс, представляющий стол в кафе.

    Атрибуты:
    ----------
    number : int
        Номер стола.
    guest : Guest
        Гость, который сидит за этим столом. Изначально None.
    """

    def __init__(self, number):
        """
        Инициализация стола с его номером и пустым местом для гостя.

        Параметры:
        ----------
        number : int
            Номер стола.
        """
        self.number = number  # Номер стола
        self.guest = None  # По умолчанию за столом нет гостя (guest = None)


# Класс Guest (Гость), который является потоком
class Guest(threading.Thread):
    """
    Класс, представляющий гостя в кафе. Наследуется от threading.Thread для запуска в отдельном потоке.

    Атрибуты:
    ----------
    name : str
        Имя гостя.
    """

    def __init__(self, name):
        """
        Инициализация гостя с его именем.

        Параметры:
        ----------
        name : str
            Имя гостя.
        """
        super().__init__()  # Инициализация класса Thread
        self.name = name  # Имя гостя

    # Метод run выполняется при запуске потока гостя
    def run(self):
        """
        Метод, который запускается при старте потока. Имитация процесса приема пищи с случайной задержкой.
        """
        # Генерация случайной задержки от 3 до 10 секунд, чтобы имитировать время, которое гость проводит за столом
        time.sleep(random.randint(3, 10))


# Класс Cafe (Кафе)
class Cafe:
    """
    Класс, представляющий кафе с определённым количеством столов и очередью для гостей.

    Атрибуты:
    ----------
    tables : list
        Список объектов Table (столов).
    queue : Queue
        Очередь гостей, если все столы заняты.
    """

    def __init__(self, *tables):
        """
        Инициализация кафе с заданными столами.

        Параметры:
        ----------
        *tables : list
            Столы в кафе.
        """
        self.tables = tables  # Сохраняем список столов
        self.queue = Queue()  # Инициализируем очередь для гостей, которые будут ждать свободных столов

    def guest_arrival(self, *guests):
        """
        Метод, который обрабатывает прибытие гостей. Гости либо садятся за столы, либо встают в очередь.

        Параметры:
        ----------
        *guests : list
            Список гостей, которые пришли в кафе.
        """
        # Проходим по каждому гостю
        for guest in guests:
            # Пытаемся найти свободный стол (где guest is None)
            free_table = next((table for table in self.tables if table.guest is None), None)

            if free_table:
                # Если свободный стол найден, садим гостя за стол
                free_table.guest = guest  # Закрепляем гостя за столом
                guest.start()  # Запускаем поток гостя (он начинает "есть")
                print(f"{guest.name} сел(-а) за стол номер {free_table.number}")
            else:
                # Если нет свободных столов, добавляем гостя в очередь
                self.queue.put(guest)  # Добавляем гостя в очередь
                print(f"{guest.name} в очереди")

    def discuss_guests(self):
        """
        Метод, который имитирует процесс обслуживания гостей.
        Обслуживание продолжается, пока есть гости за столами или в очереди.
        """
        # Пока есть гости за столами или кто-то ждет в очереди
        while not self.queue.empty() or any(table.guest is not None for table in self.tables):
            # Проходим по каждому столу
            for table in self.tables:
                # Если за столом сидит гость и он уже закончил есть (поток завершился)
                if table.guest and not table.guest.is_alive():
                    # Гость закончил есть, освобождаем стол
                    print(f"{table.guest.name} покушал(-а) и ушёл(ушла)")
                    print(f"Стол номер {table.number} свободен")
                    table.guest = None  # Освобождаем стол (guest = None)

                    # Проверяем, есть ли гости в очереди
                    if not self.queue.empty():
                        # Берем следующего гостя из очереди
                        next_guest = self.queue.get()  # Извлекаем гостя из очереди
                        table.guest = next_guest  # Садим его за освобожденный стол
                        next_guest.start()  # Запускаем его поток (он начинает "есть")
                        print(f"{next_guest.name} вышел(-ла) из очереди и сел(-а) за стол номер {table.number}")

            # Небольшая пауза, чтобы не перегружать процессор частыми проверками состояния
            time.sleep(1)


# Основная часть программы

# Создаем столы. В данном случае 5 столов с номерами от 1 до 5
tables = [Table(number) for number in range(1, 6)]

# Имена гостей, которые пришли в кафе
guests_names = [
    'Maria', 'Oleg', 'Vakhtang', 'Sergey', 'Darya', 'Arman',
    'Vitoria', 'Nikita', 'Galina', 'Pavel', 'Ilya', 'Alexandra'
]

# Создаем гостей, каждый из которых является потоком
guests = [Guest(name) for name in guests_names]

# Создаем объект кафе, заполняя его столами
cafe = Cafe(*tables)

# Принимаем гостей: пытаемся посадить их за столы или ставим в очередь
cafe.guest_arrival(*guests)

# Запускаем обслуживание гостей: следим за освобождением столов и пересадкой гостей из очереди
cafe.discuss_guests()
