#   Цель: понять разницу между линейным и многопроцессным подходом, выполнив операции обоими способами.
#   Задача "Многопроцессное считывание":
# Необходимо считать информацию из нескольких файлов одновременно, используя многопроцессный подход.


import time
from datetime import timedelta, datetime  # Импортируем необходимые модули для работы с временем
from multiprocessing import Pool  # Импортируем Pool для многопроцессной работы


def read_info(name):
    """
    Функция для чтения содержимого файла построчно.

    Параметры:
    name (str): Имя файла, который нужно открыть и прочитать.

    Возвращает:
    list: Список строк, прочитанных из файла.
    """
    all_data = []  # Локальный список, куда будут записываться строки из файла

    # Открываем файл с помощью контекстного менеджера "with". Это гарантирует, что файл закроется автоматически.
    with open(name, 'r') as file:
        # Читаем файл построчно до тех пор, пока не встретим пустую строку
        while True:
            line = file.readline()  # Читаем строку
            if not line:  # Если строка пустая, значит конец файла
                break
            all_data.append(line)  # Добавляем прочитанную строку в список

    return all_data  # Возвращаем список строк из файла


def linear_read(filenames):
    """
    Функция для линейного чтения данных из файлов.

    Параметры:
    filenames (list): Список имён файлов для чтения.

    Описание:
    Эта функция считывает файлы последовательно, по одному за раз.
    Измеряет время выполнения всего процесса и выводит его на экран.
    """
    # Запоминаем текущее время в начале выполнения для последующего замера времени
    start_time = datetime.now()

    # Проходим по каждому имени файла в списке
    for filename in filenames:
        read_info(filename)  # Вызываем функцию чтения для каждого файла

    # Запоминаем текущее время после выполнения всех операций
    end_time = datetime.now()

    # Вычисляем и выводим, сколько времени заняло выполнение
    print(f"Линейный подход занял: {end_time - start_time}")


def multiprocess_read(filenames):
    """
    Функция для многопроцессного чтения данных из файлов.

    Параметры:
    filenames (list): Список имён файлов для чтения.

    Описание:
    Эта функция использует несколько процессов для одновременного считывания файлов.
    Измеряет время выполнения всего процесса и выводит его на экран.
    """
    # Запоминаем текущее время в начале выполнения для последующего замера времени
    start_time = datetime.now()

    # Используем Pool для параллельного выполнения задач
    with Pool() as pool:
        # Метод map передает каждый элемент списка filenames в функцию read_info одновременно
        pool.map(read_info, filenames)

    # Запоминаем текущее время после выполнения всех операций
    end_time = datetime.now()

    # Вычисляем и выводим, сколько времени заняло выполнение
    print(f"Многопроцессный подход занял: {end_time - start_time}")


if __name__ == '__main__':
    """
    Основной блок программы. Выполняется, только если скрипт запускается напрямую.
    Это важно для корректной работы многопроцессного подхода в Windows.
    """

    # Список имён файлов для чтения.
    # Эти файлы должны существовать в той же папке, где находится скрипт, или укажите полный путь к файлам.
    filenames = [f'./file{number}.txt' for number in range(1, 5)]  # Пример: file1.txt, file2.txt, ...

    # Линейное чтение файлов
    # Раскомментируйте следующую строку, чтобы запустить линейное чтение.
    # linear_read(filenames)

    # Многопроцессное чтение файлов
    # Раскомментируйте следующую строку, чтобы запустить многопроцессное чтение.
    multiprocess_read(filenames)
