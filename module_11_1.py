# Цель: познакомиться с использованием сторонних библиотек в Python и применить их в различных задачах.

# Импортируем необходимые библиотеки
import pandas as pd  # Библиотека Pandas для работы с таблицами и данными
import numpy as np  # Библиотека NumPy для работы с массивами и матрицами, а также для математических операций
import matplotlib.pyplot as plt  # Библиотека Matplotlib для создания графиков и визуализации данных


def analyze_data(file_path):
    """
    Функция для загрузки и базового анализа данных из CSV-файла.

    Параметры:
    file_path (str): Путь к CSV-файлу, содержащему данные для анализа.

    Функция выполняет:
    1. Загрузку данных из CSV.
    2. Вывод первых 5 строк данных для ознакомления.
    3. Вычисление средних значений и максимальных значений по столбцам.
    4. Вывод описательной статистики для данных (такие как среднее, стандартное отклонение, минимальные и максимальные значения).
    """

    # Загрузка данных из CSV-файла в объект DataFrame
    data = pd.read_csv(file_path)

    # Выводим первые 5 строк таблицы для знакомства с данными
    print("Первые 5 строк данных:\n", data.head())

    # Вычисляем средние значения для каждого столбца и выводим их
    print("Средние значения по каждому столбцу:\n", data.mean())

    # Вычисляем максимальные значения по каждому столбцу и выводим их
    print("Максимальные значения по каждому столбцу:\n", data.max())

    # Выводим общую статистику для данных, включая среднее, минимальные и максимальные значения и стандартное отклонение
    print("Описание данных:\n", data.describe())


def numpy_operations():
    """
    Функция для выполнения базовых операций с массивами и матрицами с использованием библиотеки NumPy.

    Функция демонстрирует:
    1. Создание одномерного массива и вычисление его среднего и суммы.
    2. Создание двумерной матрицы, транспонирование и умножение матриц.
    """

    # Создаем одномерный массив чисел от 1 до 5
    array = np.array([1, 2, 3, 4, 5])
    print("Созданный массив:", array)  # Выводим массив для проверки

    # Вычисляем среднее значение массива
    print("Среднее значение массива:", np.mean(array))

    # Вычисляем сумму всех элементов массива
    print("Сумма элементов массива:", np.sum(array))

    # Создаем двумерную матрицу (матрица 2x2)
    matrix = np.array([[1, 2], [3, 4]])
    print("Матрица:\n", matrix)  # Выводим матрицу

    # Транспонируем матрицу (меняем строки и столбцы местами)
    print("Транспонированная матрица:\n", np.transpose(matrix))

    # Умножаем матрицу саму на себя
    print("Умножение матрицы на саму себя:\n", np.dot(matrix, matrix))


def plot_data():
    """
    Функция для построения гистограммы с использованием библиотеки Matplotlib.

    Функция выполняет:
    1. Генерацию случайных данных с нормальным распределением.
    2. Построение гистограммы для визуализации распределения данных.
    3. Настройку заголовков и подписей к графику.
    """

    # Генерируем 100 случайных чисел с нормальным распределением (со средним 0 и стандартным отклонением 1)
    data = np.random.normal(size=100)

    # Строим гистограмму с 10 интервалами (bins), синего цвета, с чёрными краями столбцов
    plt.hist(data, bins=10, alpha=0.5, color='b', edgecolor='black')

    # Устанавливаем заголовок для гистограммы
    plt.title("Пример гистограммы нормального распределения")

    # Устанавливаем подпись для оси x
    plt.xlabel("Значение")

    # Устанавливаем подпись для оси y
    plt.ylabel("Частота")

    # Отображаем гистограмму на экране
    plt.show()


def main():
    """
    Основная функция для вызова других функций.

    Выполняет:
    1. Загрузку и анализ данных с помощью Pandas.
    2. Выполнение операций с массивами и матрицами с помощью NumPy.
    3. Визуализацию данных с помощью Matplotlib.
    """

    # Путь к CSV-файлу. Укажите ваш собственный путь к файлу, если тестируете на другом файле
    file_path = 'example.csv'

    # Вызываем функцию анализа данных
    analyze_data(file_path)

    # Вызываем функцию операций с массивами и матрицами
    numpy_operations()

    # Вызываем функцию построения гистограммы
    plot_data()


# Проверяем, является ли данный файл основным и запускаем основную функцию, если это так
if __name__ == "__main__":
    main()
