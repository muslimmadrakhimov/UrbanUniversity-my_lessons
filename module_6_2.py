# Класс Vehicle - базовый класс для любого транспорта
class Vehicle:
    # Атрибут класса: список допустимых цветов для изменения цвета транспорта
    __COLOR_VARIANTS = ['blue', 'red', 'green', 'black', 'white']

    # Конструктор класса Vehicle
    def __init__(self, owner, model, color, engine_power):
        """
        Конструктор инициализирует атрибуты объекта:
        :param owner: владелец транспорта (может изменяться)
        :param model: модель (марка) транспорта (не может изменяться напрямую)
        :param color: цвет транспорта (может изменяться только через метод set_color)
        :param engine_power: мощность двигателя (не может изменяться напрямую)
        """
        self.owner = owner  # Владелец транспорта, можно менять
        self.__model = model  # Модель транспорта, изменить нельзя
        self.__color = color  # Цвет транспорта, изменяется через set_color
        self.__engine_power = engine_power  # Мощность двигателя, изменить напрямую нельзя

    # Метод для получения модели транспорта
    def get_model(self):
        """
        Возвращает строку с названием модели транспорта.
        :return: строка вида "Модель: <название модели>"
        """
        return f"Модель: {self.__model}"

    # Метод для получения мощности двигателя
    def get_horsepower(self):
        """
        Возвращает строку с мощностью двигателя.
        :return: строка вида "Мощность двигателя: <мощность>"
        """
        return f"Мощность двигателя: {self.__engine_power}"

    # Метод для получения цвета транспорта
    def get_color(self):
        """
        Возвращает строку с цветом транспорта.
        :return: строка вида "Цвет: <цвет транспорта>"
        """
        return f"Цвет: {self.__color}"

    # Метод для печати полной информации о транспортном средстве
    def print_info(self):
        """
        Печатает информацию о транспорте, используя другие методы класса:
        - Модель транспорта
        - Мощность двигателя
        - Цвет транспорта
        - Владелец
        """
        print(self.get_model())          # Выводит модель
        print(self.get_horsepower())     # Выводит мощность двигателя
        print(self.get_color())          # Выводит цвет
        print(f"Владелец: {self.owner}")  # Выводит владельца

    # Метод для изменения цвета автомобиля
    def set_color(self, new_color):
        """
        Метод меняет цвет автомобиля, если новый цвет находится в списке допустимых (__COLOR_VARIANTS).
        Если цвет не найден, выводится сообщение о невозможности смены.
        :param new_color: новый цвет для транспорта
        """
        # Проверяем, есть ли новый цвет в списке допустимых цветов (игнорируя регистр)
        if new_color.lower() in [color.lower() for color in self.__COLOR_VARIANTS]:
            self.__color = new_color  # Меняем цвет, если он допустим
        else:
            print(f"Нельзя сменить цвет на {new_color}")  # Сообщение, если цвет не найден в списке

# Класс Sedan - наследник класса Vehicle
class Sedan(Vehicle):
    # Атрибут класса: максимальное количество пассажиров
    __PASSENGERS_LIMIT = 5

    # Конструктор класса Sedan, наследующий атрибуты и методы класса Vehicle
    def __init__(self, owner, model, color, engine_power):
        """
        Инициализирует объект Sedan, наследуя свойства от класса Vehicle.
        :param owner: владелец автомобиля
        :param model: модель автомобиля
        :param color: цвет автомобиля
        :param engine_power: мощность двигателя
        """
        super().__init__(owner, model, color, engine_power)  # Вызываем конструктор родительского класса Vehicle

# Создаем объект класса Sedan
vehicle1 = Sedan('Fedos', 'Toyota Mark II', 'blue', 500)

# Выводим информацию о транспортном средстве (модель, мощность, цвет, владелец)
vehicle1.print_info()

# Попытка смены цвета на недопустимый
vehicle1.set_color('Pink')  # Ожидаем ошибку, т.к. цвет недопустим

# Попытка смены цвета на допустимый (черный)
vehicle1.set_color('BLACK')  # Цвет должен измениться на BLACK

# Изменяем владельца
vehicle1.owner = 'Vasyok'  # Владелец меняется напрямую, т.к. атрибут публичный

# Повторно выводим информацию после изменений
vehicle1.print_info()
